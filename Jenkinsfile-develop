#!groovy
/*
 * (C) Reiform
 *
 * Jack Hay, Jan 2022
 * jack@reiform.com
 */

def message = ""
def test_results = "tests didn't run"
def gosec_results = "gosec didn't run"

def getLastCommitMessage = {
  message = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
}

pipeline {
  environment {
    PROJECT = "mynah"
    VERSION = "latest"
    IMAGE = "$PROJECT:$VERSION"
  }
  agent any
  stages {
    stage('Prepare') {
      steps {
        script {
          getLastCommitMessage()
        }
        slackSend message: "Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} starting from commit:\n${message}\n"
        checkout scm
      }
    }
    stage('Build') {
      steps {
        script {
          docker.build(IMAGE)
        }
      }
    }
    stage('Test') {
      steps {
        script {
          docker.image(IMAGE).inside {
            test_results = sh(
              script: "rm -rf .cache ; export XDG_CACHE_HOME=../.cache ; make clean && make GO=/usr/local/go/bin/go test | grep -e FAIL -e '--- PASS'",
              returnStdout: true
            ).trim()
            // sh 'curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b bin latest'
            // sh 'export PATH=$PATH:/usr/local/go/bin ; ./bin/gosec api/... || true'
            // gosec_results = sh(
            //   script: 'export GOPATH=/usr/local/go ; export PATH=$PATH:$GOPATH/bin ; export GO111MODULE=on ; cd api ; ../bin/gosec --quiet ./... | grep -e Severity -e Issues || true 2>&1',
            //   returnStdout: true
            // ).trim()
          }
        }
      }
    }
  }
  post {
    always {
      slackSend message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n${test_results}\n"
      sh "docker rmi $IMAGE || true"
    }
  }
}
